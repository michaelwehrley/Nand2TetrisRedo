// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // instruction[5] Destination A

    // Put your code here:
    Mux16(a=instruction, b=ALUOut, sel=instruction[15], out=ARegisterIn);

    // A-instruction (`instruction[15]` must == 0)
    Not(in=instruction[15], out=isAInstruction);
    ARegister(in=ARegisterIn, load=isAInstruction, out[0..14]=addressM, out=ARegisterOut);

    // Set to A or M
    Mux16(a=ARegisterOut, b=inM, sel=instruction[12], out=ALUInBottom);

    // c1 c2 c3 c4 c5 c5
    ALU(
      x=ALUInTop,
      y=ALUInBottom,
      zx=instruction[11],
      nx=instruction[10],
      zy=instruction[9],
      ny=instruction[8],
      f=instruction[7],
      no=instruction[6],
      out=ALUOut,
      out=outM,
      zr=isZero,
      ng=isNegative
    );

    // Destination instructions
    // d1
    // d2
    DRegister(in=ALUOut, load=instruction[4], out=ALUInTop);
    // d3
    // writeM: Write to register M (i.e., c-instruction && d3 must be `true`)
    And(a=instruction[15], b=instruction[3], out=writeM);

    // Jump Instructions:
    And(a=isNegative, b=instruction[2], out=jmpJ1);
    And(a=isZero, b=instruction[1], out=jmpJ2);
    Not(in=isZero, out=notZero);
    Not(in=isNegative, out=notNegative);
    And(a=notZero, b=notNegative, out=isPositive);
    And(a=isPositive, b=instruction[0], out=jmpJ3);
    Or(a=jmpJ1, b=jmpJ2, out=jmpJ1OrJ2);
    Or(a=jmpJ3, b=jmpJ1OrJ2, out=isJMP);

    // PC
    PC(in=ARegisterOut, load=isJMP, inc=true, reset=reset, out[0..14]=pc);
}
