// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not

// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
    // Put you code here:
    Mux16(a=x, b=false, sel=zx, out=outZX);
    Not16(in=outZX, out=notOutZX);
    Mux16(a=outZX, b=notOutZX, sel=nx, out=outX);

    Mux16(a=y, b=false, sel=zy, out=outZY);
    Not16(in=outZY, out=notOutZY);
    Mux16(a=outZY, b=notOutZY, sel=ny, out=outY);

    Add16(a=outX, b=outY, out=outAdd);
    And16(a=outX, b=outY, out=outAnd);

    Mux16(a=outAnd, b=outAdd, sel=f, out=preOut);
    Not16(in=preOut, out=notPreOut);

    Mux16(a=preOut, b=notPreOut, sel=no, out=out,
        out[15]=outForNG15,
        out[14]=outForNG14,
        out[13]=outForNG13,
        out[12]=outForNG12,
        out[11]=outForNG11,
        out[10]=outForNG10,
        out[9]=outForNG9,
        out[8]=outForNG8,
        out[7]=outForNG7,
        out[6]=outForNG6,
        out[5]=outForNG5,
        out[4]=outForNG4,
        out[3]=outForNG3,
        out[2]=outForNG2,
        out[1]=outForNG1,
        out[0]=outForNG0);
    And(a=true, b=outForNG15, out=ng);

    Or(a=outForNG15, b=outForNG14, out=OrzrqOut14);
    Or(a=OrzrqOut14, b=outForNG13, out=OrzrqOut13);
    Or(a=OrzrqOut13, b=outForNG12, out=OrzrqOut12);
    Or(a=OrzrqOut12, b=outForNG11, out=OrzrqOut11);
    Or(a=OrzrqOut11, b=outForNG10, out=OrzrqOut10);
    Or(a=OrzrqOut10, b=outForNG9, out=OrzrqOut9);
    Or(a=OrzrqOut9, b=outForNG8, out=OrzrqOut8);
    Or(a=OrzrqOut8, b=outForNG7, out=OrzrqOut7);
    Or(a=OrzrqOut7, b=outForNG6, out=OrzrqOut6);
    Or(a=OrzrqOut6, b=outForNG5, out=OrzrqOut5);
    Or(a=OrzrqOut5, b=outForNG4, out=OrzrqOut4);
    Or(a=OrzrqOut4, b=outForNG3, out=OrzrqOut3);
    Or(a=OrzrqOut3, b=outForNG2, out=OrzrqOut2);
    Or(a=OrzrqOut2, b=outForNG1, out=OrzrqOut1);
    Or(a=OrzrqOut1, b=outForNG0, out=OrzrqOut0);

    Not(in=OrzrqOut0, out=zr);




}